#
# ┌──┐
# |  |
# |Eh|ony
# └──┘
#

# Name of the exported OSGi service.
# log4j.logger.my.company=DEBUG, osgi:${osgi.service.name}
osgi.service.name=JmsAppender

# Override standard JNDI parameters from ${karaf}/etc/jndi.properties
# See javax.naming.Context for more info.
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
# java.naming.factory.object=
# java.naming.factory.state=
# java.naming.factory.url.pkgs=
java.naming.provider.url=failover:tcp://localhost:61616
# java.naming.dns.url=
# java.naming.authoritative=
# java.naming.batchsize=
# java.naming.referral=
# java.naming.security.protocol=
# java.naming.security.authentication=
# java.naming.security.principal=
# java.naming.security.credentials=
# java.naming.language=
# java.naming.applet=

# Allow service to use internal buffer to store messages when broker is unavailable.
jms.failover.managed=false

# Internal buffer size.
jms.failover.threshold=5000

# Interval to send buffered messages to broker, msec.
jms.failover.bufferFlushPeriod=1000

# Auto (default)
#     Session automatically acknowledges receipt of a client message either
#     when the session has successfully returned from a call to receive or
#     when the message listener the session has called to process the message
#     successfully returns.
# Client
#     The client acknowledges a consumed message by calling the acknowledge
#     method of the message. Acknowledging a consumed message acknowledges
#     all messages that the session has consumed. When client acknowledgment
#     mode is used, a client may build up a large number of unacknowledged
#     messages while attempting to process them. A JMS provider should provide
#     administrators with a way to limit client overrun so that clients are
#     not driven to resource exhaustion and ensuing failure when some resource
#     they are using is temporarily blocked.
# PermitDuplicates
#     Instructs the session to lazily acknowledge the delivery of messages.
#     This is likely to result in the delivery of some duplicate messages
#     if the JMS provider fails, so it should only be used by consumers that 
#     can tolerate duplicate messages. Use of this mode can reduce session 
#     overhead by minimizing the work the session does to prevent duplicates.
jms.session.acknowledge=Auto
jms.session.transacted=false

# Topic (default)
# Queue
jms.destination.type=Topic
jms.destination.name=log

# Persistent
# NonPersistent (default)
appender.delivery=NonPersistent